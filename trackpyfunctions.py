import numpy as np
import pandas as pd
import pims
import trackpy as tp
import os
import matplotlib as mpl
import matplotlib.pyplot as plt
from scipy import ndimage
from skimage import morphology, util, filters
import skimage
import matplotlib.patches as mpatches
from matplotlib.pyplot import quiver

#TODO: Find the mean area of the particles at each frame so that I can measure coarsening according to the mean field (as found in o'hayre pg258-259)


def vectortracks(t1):
    """This function takes the linked particle tracks (as a pandas dataframe) from trackpy and finds the vector
    representing the particle's overall displacement.

    This loop groups every particle from the overall dataframe by the particle id.  The particles are sorted by frame id.
    The loop gets the initial position and the total displacement of the particle, and saves them in the dataframe
    vectordata"""

    vectordata = pd.DataFrame()
    for item in set(t1.particle):
        sub = t1[t1.particle == item]
        length = len(sub)
        if length == 0:
            continue
        x0 = sub['x'].iloc[0]
        y0 = sub['y'].iloc[0]
        totaldx = sub['x'].iloc[length - 1] - x0
        totaldy = sub['y'].iloc[length - 1] - y0
        vectordata = vectordata.append([{'x0': x0,
                                         'y0': y0,
                                         'dx': totaldx,
                                         'dy': totaldy,
                                         'track length': length,
                                         'particle': sub['particle'].iloc[0],
                                         'startframe': sub['frame'].iloc[0]
                                         }, ])

    return vectordata


def findparticles(frames, minsize=15):
    """
    The input for this function is  a frames object from pims.open(), and optionally a lower size limit

    Create a pandas dataframe, and then find the particles (regions) using skimage's label function.  Label connects
    regions of the same integer value, i.e. segmented regions. In this dataframe, I also save the perimeter, filled fraction,
    and the area.
    """

    features = pd.DataFrame()
    for num, img in enumerate(frames):
        black = 1
        white = 255
        label_image, number_of_labels = skimage.measure.label(img, background=black, return_num=True)
        # print("Found %d features" % (number_of_labels))
        for region in skimage.measure.regionprops(label_image, intensity_image=img):
            # Everywhere, skip small areas
            if region.area < minsize:
                continue
            # Only black areas
            if region.mean_intensity < 255:
                continue

            # Store features which survived to the criterions
            features = features.append([{'y': region.centroid[0],
                                         'x': region.centroid[1],
                                         'area': region.area,
                                         'perimeter': region.perimeter,
                                         'fraction filled': region.solidity,
                                         'frame': num,
                                         }, ])

    return features


def meanfield(data):
    """This function takes the custom trackpy dataframe generated by findparticles and returns a dataframe that includes
    the average particle area at each frame and the average particle radius, along with the initial radius and area

    The column headers in the dataframe are: 'meanarea', 'averageradius', 'frame', 'initailr', and 'initialarea'.
    """

    meandata = pd.DataFrame()
    for item in set(data.frame):
        sub = data[data.frame == item]
        length = len(sub)
        initialr = 0
        initialarea = 0
        if length == 0:
            continue
        meanarea = sub['area'].mean()
        meanradius = (sub['area'].mean()/np.pi)**.5
        frame = sub['frame'].iloc[0]
        if frame == 0:
            initialr = meanradius
            initialarea = meanarea
        meandata = meandata.append([{'meanarea': meanarea,
                                     'averageradius': meanradius,
                                     'frame': frame,
                                     'initialr': initialr,
                                     'initialarea': initialarea,
                                     }, ])
    return meandata



